#!/bin/bash

# SBChroot - Setup and manage a chroot
# Copyright (c) 2007-2008, Michiel van Wessem, Manchester, United Kingdom
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Update: added case statement, and functions. Code improvement in
# chroot_create thanks to James Jones <andarius@errantnutron.com>.

# Set architecture
VERSION=${VERSION:-14.1}

# We normally work with automatic ARCH detection. However there may be 
# some scenarios where you want to create a chroot for a different ARCH 
# then the one on your system. In which case set ARCH below it will 
# then skip the automagic detection.
#ARCH=""

if [[ -z "$ARCH" ]]; then
    case "$( uname -m )" in
        i?86) ARCH=i486 ;;
        arm*) ARCH=arm ;;
        # Unless $ARCH is already set, use uname -m for all other archs:
        *) ARCH=$( uname -m ) ;;
    esac
fi 

if [[ "$ARCH" = "i486" || "$ARCH" = "i686" ]]; then
    suffix=""
elif [[ "$ARCH" = "x86_64" ]]; then
    suffix="64"
else
    suffix=""
fi

DISTRO="slackware{suffix}"

# Set install variables
localmirror=${localmirror:-"/home/ftp/mirrors/slackware.com/${DISTRO}-${VERSION}"}
buildenv=${buildenv:-"/chroot/${DISTRO}-${VERSION}"}
srcdir="${DISTRO}"

# What do we want to install
series="a ap d e f k kde kdei l n t tcl x xap xfce y"

# config files
config_files="resolv.conf hosts X11/xorg.conf"

# Config directives
networking=${networking:-yes}
custprompt=${custprompt:-yes}

# Enable UTF8
enable_utf=${enable_utf:-yes}
utf_lang="en_US.UTF-8"

# Warn if there are non standard packages on start-up or shutdown?
# This is disabled for now.
warning_nonstd=${warning_nonstd:-no}

# Set a custom language
# you can set it to the same language as your system as follows:
# lang=${LANG} or set a custom language: with lang="en_US.UTF8"
lang="${lang:-${LANG}}"


# define your custom prompt below
# for example: prompt="(chroot) \u@\h:\w\$ "
prompt="\[\e[1;31m\]\u\[\e[m\]\[\e[1;35m\]@sbchroot\[\e[0;31m\]\%ROOTARCH%\[\e[m\]\[\e[1;37m\]:\[\e[m\]\[\e[1;34m\]\w\[\e[m\]\[\e[1;37m\]\\\\$\[\e[m\]\[\e[1;37m\] "

# manpage (future possible addtion)
manpage="/usr/man/man8/sbchroot.8.gz"

# Set makeflags
if [[ ! -z $MAKEFLAGS ]]; then
    JOBS="$(echo $MAKEFLAGS | awk '{ print $NF }')"
else
    JOBS="7"
fi

# ------------------- No Edits Needed below this line ------------------- #

# Current version string.
release="2.8.5"

# If I ever decide to switch to a config file:
globalrc="/etc/sbchroot.conf"

if [[ -r ${globalrc} ]]; then
    source ${globalrc}

    #check that both the config file and script are in sync.
    if [[ "$VERSION" != "$release" ]]; then
        echo "the version of your configuration file is out of sync with the script."
        echo "please make sure you have merged any changes in the configuration file,"
        echo "before continuing. Alternatively this may be a problem upstream"
    fi
fi

function chroot_create() {
    echo "initiating building enviroment"
    echo "  *- creating initial directory"
    if [[ ! -d ${buildenv} ]]; then
        mkdir -p ${buildenv}
    fi

    # Let's check if the PKGDIR is valid, after silly bug report by firebird. ;-)
    if [[ ! -e ${localmirror}/${srcdir}/MANIFEST.bz2 ]]; then
        echo "ERROR: Can't find MANIFEST.bz2"
        echo "       Double check the location of your mirror is correct and complete"
        exit 1
    fi

    
    echo "  *- installing packages ..."
    for diskset in ${series}; do
        if [[ -d ${localmirror}/${srcdir}/${diskset} ]]; then 
            echo " *- series ${diskset} ..."
            for pkg in  $(echo ${localmirror}/${srcdir}/${diskset}/*.t?z); do
                echo "   \- installing $(basename ${pkg})"
                ROOT=${buildenv} /sbin/installpkg ${pkg} > /dev/null 2>&1
            done
        fi
    done
}

function chroot_config() {
    echo "  *- Final configuation"
    if [[ "${custprompt}" == "yes" ]]; then
        bashprofile="${buildenv}/root/.bash_profile"
        bashrc="${buildenv}/root/.bashrc"

# Just cause `cat' seems to have problems if it doesn't
# start on column 1.
cat > ${bashprofile} << EOF
# .bash_profile
# bash configuration file for login-shells.

# if we can read .bashrc source it!
if [ -r ${HOME}/.bashrc ]; then
    source ${HOME}/.bashrc
fi
EOF

cat > ${bashrc} << EOF
# .bashrc
# bash configuration file for nonlogin-shells.

source /etc/profile > /dev/null 2>&1

export ARCH='%BASEARCH%'
export LANG='${lang}'
export MAKEFLAGS='-j ${JOBS}'

export PS1='${prompt}'
EOF

    fi

    echo "Done."

    # Add the right suffix for ROOTARCH based on the type of chroot we are building
    if [[ "$ARCH" = "i486" || "$ARCH" = "i686" ]]; then
        sed -i 's#%ROOTARCH%#32#g' ${buildenv}/root/.bashrc
        sed -i 's#%BASEARCH%#i486#g' ${buildenv}/root/.bashrc
    elif [[ "$ARCH" = "x86_64" ]]; then
        sed -i 's#%ROOTARCH%#64#g' ${buildenv}/root/.bashrc
        sed -i 's#%BASEARCH%#x86_64#g' ${buildenv}/root/.bashrc
    else
        sed -i 's#%ROOTARCH%##g' ${buildenv}/root/.bashrc
        sed -i 's#%BASEARCH%##g' ${buildenv}/root/.bashrc
    fi


    if [[ "${networking}" == "yes" ]]; then
        for config in ${config_files}; do
            if [[ -f /etc/${config} ]]; then
                cp -v /etc/${config} ${buildenv}/etc/${config}
            fi
        done
    fi
}

function chroot_patch() {
    if [[ -d ${localmirror}/patches/packages/ ]]; then
        ROOT=${buildenv} upgradepkg --install-new  ${localmirror}/patches/packages/*.t?z
    fi

    if [[ $1 = "initial" ]]; then
        ( cd ${buildenv}
          for newfile in $(find etc -type f -name "*.new"); do
              oldfile=$(dirname ${newfile})/$(basename ${newfile} .new)
              mv -v ${newfile} ${oldfile}
          done
        )
    fi

    echo "Checking for .new files in /etc"
    ARRAY=$(find ${buildenv}/etc -name "*.new")
    FILELIST=($ARRAY)
    COUNT=0

    if [[ ${#FILELIST[*]} -gt 0 ]]; then
        echo "The following files have been found:"
        until [[ $COUNT -gt ${#FILELIST[*]} ]]; do
            echo "${FILELIST[$COUNT]}"
            COUNT=$(($COUNT + 1))
        done
        echo "please move these files to their proper locations"
    else
        echo "No new files"
    fi
}

function chroot_wipe() {
    echo "THIS WILL WIPE YOUR CHROOT"
    echo -n "ARE YOU SURE YOU WANT TO DO THIS? (YES/NO) "
    read answer

    case ${answer} in
        YES)
            # Extra Safety measure: make sure ${buildenv} exists!
            if [[ -d ${buildenv} ]]; then
                echo ""
                echo "Please confirm deletion of ${buildenv} by"
                echo "typing \"CONFIRM\"" and pressing enter
                echo -n "> "
                read affirmative

                if [[ ${affirmative} = "CONFIRM" ]]; then
                    echo " * - Commencing deletion of chroot in ${buildenv}"
                    echo "   \ Deleting ..."
                    rm -rf ${buildenv}
                    echo "   \ Done."
                else
                    echo " * - Confirmation failure. Aborting deletion."
                    exit 1
                fi
            else
                echo "ERROR: ${buildenv} does not excist."
                echo "Aborting..."
                exit 3::
            fi
            ;;
        NO)
            echo "Okay. Wise Choice"
            exit 0
:           ;;
        *)
            clear
            echo "Please type either \"YES\" or \"NO\""
            echo ""
            chroot_wipe
        ;;
    esac
}

function chroot_check() {
    for config in ${config_files}; do
        MD5SUM_LOC=$(md5sum /etc/${config} | awk '{ print $1 }')
        MD5SUM_CHR=$(md5sum ${buildenv}/etc/${config} | awk '{ print $1 }')

        if [[ ${MD5SUM_LOC} != ${MD5SUM_CHR} ]]; then
            if [[ -f /etc/${config} ]]; then
                echo "* - Updating ${buildenv}/etc/${config}"
                cp -av /etc/${config} ${buildenv}/etc/${config}
            fi
        fi
    done
}

function chroot_warn() {
    if [[ ${warning_nonstd} == "yes" ]]; then
        echo "testing"
        #if [[ ]];
        #    echo "WARNING: You're chroot enviroment is no longer clean."
        #    echo "You have the following non-standard slackware packages installed:"
        #fi
    fi
}

function chroot_distro() {
    echo "IMPLEMENTATION FAIL!"
    exit 2
}

function chroot_alien() { 
    if [[ $(readlink $(which gzip)) ]]; then
        GZIP=$(readlink $(which gzip))
    else
        echo "ERROR: gzip not found on system. please install gzip before continuing..."
    fi
    
    if [[ $(readlink $(which tar)) ]]; then
        TAR=$(readlink $(which tar))
    else
        echo "ERROR: tar not found on system. please install tar before continuing..."
    fi

    OLDPATH=${PATH}
    export PATH=${buildenv}/sbin:${buildenv}/bin:${buildenv}/usr/sbin/:${buildenv}/usr/bin:$PATH
    
    if [[ -d ${localmirror}/${distro}/a/ ]]; then
        ${TAR} -C ${buildenv} -xvf ${localmirror}/${distro}/a/tar-*.tgz
        ${TAR} -C ${buildenv} -xvf ${localmirror}/${distro}/a/gzip-*.tgz
        
        
        /${buildenv}/bin/tar -C ${buildenv} -xvf ${localmirror}/${distro}/a/pkgtools-*.tgz
        /${buildenv}/bin/tar -C ${buildenv} -xvf ${localmirror}/${distro}/a/xz-*.tgz
    fi
}

function chroot_start() {
    if [[ ! -e ${buildenv} ]]; then
        echo "ERROR; ${buildenv} doesn't exist"
        echo "ERROR; Did you perhaps mean to run $0 --create instead?"

        exit 1
    fi

    # Check if the config files have been changed in any way
    chroot_check

    mount -o bind /proc ${buildenv}/proc -t proc
    mount -o bind /sys ${buildenv}/sys -t sysfs
    mount -o bind /dev ${buildenv}/dev -t dev

    /usr/bin/clear

    # Let's force a login shell.
    chroot ${buildenv} /bin/bash -l
}

function chroot_stop() {
    if [[ -z ${OLDPATH} ]]; then
        export PATH=${OLDPATH}
    fi

    /usr/bin/clear
    /sbin/umount ${buildenv}/proc || echo "error can't umount ${buildenv}/proc. Please unmount manually"
    /sbin/umount ${buildenv}/sys || echo "error can't umount ${buildenv}/proc. Please unmount manually"
    /sbin/umount ${buildenv}/dev || echo "error can't umount ${buildenv}/proc. Please unmount manually"
}

function sbchroot_clean() {

    if [[ $1 = "-clean-system" ]]; then
        pkgdir=${buidenv}/var/log/packages
        for package in $(echo ${pkgdir}/*_SBo | awk -F/ '{ print $NF }'); do
            ROOT=${buildenv} /sbin/removepkg ${package}
        done
    fi

    # <code = 'untested'> but should work ;-)
    echo "You have requested to remove the following packages"
    echo "from the chroot in ${buildenv}:"

    for rmpkg in "${@}"; do
        echo "ROOT=${buildenv} /sbin/removepkg ${rmpkg}"
    done
}

function chroot_help() {
    if [[ -r ${manpage} ]]; then
        /usr/bin/man ${manpage}
    elif [[ $2 == "short" ]]; then
        echo ">Incorrect option \"$1\"..."
        echo ""
        echo "usage $(basename $0): <--distro=> [--create] [--patch] [--start]"
        echo "                [--clean] [--rebuild] [--config] [--alien]"
        echo ""
        echo "See also $(basename $0) --help for more information"
    elif [[ $1 == "long" ]]; then
cat << EOF
SBChroot - Shellscript to create/manage/build/run chroots.

OPTIONS:
-c, -i, --create, --install
        create the chroot enviroment. This will create the directories,
        and install the needed files (up and including to the latest patches)
        as well as do an initial configuration.

-d, --distro (experimental, not implemented)
        Install another distro other than the one mentioned in the 
        startup variables. This will allow support for slackware-current,
        slackware64-versions and possible slamd64 versions. This must always
        be called as the *FIRST* argument. (EXPERIMENTAL - NOT IMPLEMENTED)

-a, --alien
        create the chroot enviroment for an system that is not slackware 
        specfic. This does require initially for gzip and tar present on 
        the system. The rest including the setting of various PATHS is done
        by the script.

--clear, --clean, --clean-system
        *EXPERIMENTAL* This should remove any obviously non standard packages
        from your system. At the moment the code is purely geared to SBo 
        related packages. 

-h, --help, -?
        You're looking at it. This is the help you're looking for. 
        Yah. RLY.

-r, --rebuild
        Rebuild the chroot. This will first wipe it, then rebuild it.
        Note that it doesn't allow automated removal due to the way the
        delete function works (at the moment).

-rc, --config, --conf
        Redo the initial configuration steps.

-s, --start
        The default action. This will also happen when SBChroot is called
        without any default arguments.

-u, -p, --patch, --update
        upgrade the chroot with the lastest patches.

-v, --version
        Display the version of the current script.

--wipe, --remove
        Remove the chroot. This will *delete* your chroot. Don't come 
        whining to me. It has plenty of prompts to stop you from doing
        something intentional stupid.
EOF
    fi
    exit 0
}

function chroot_version() {
    echo "$(basename $0) version: ${release}"
    echo "Running on ${DISTRO} $(awk '{print $NF}' /etc/slackware-version)"
    echo ""
    exit 0
}

# This way we can call `help' without being root.
if [[ $1 == "-?" || $1 == "-h" || $1 == "--help" || $1 == "-help" ]]; then
    chroot_help long
elif [[ $1 == "-v" || $1 == "--v" || $1 == "--version" || $1 == "-version" ]]; then
    chroot_version
fi

if [[ $UID != "0" ]]; then
    echo "You need to be root to run this program."
    echo "See \`$(basename $0) --help\` or more options."
    exit 1
fi

# See how we were called.
case "$1" in
    -c | -i | --create | --install)
        chroot_create
        chroot_patch initial
        chroot_config
        ;;
    -a | --alien)
        chroot_alien
        chroot_create
        chroot_patch initial
        chroot_config
        ;;
    -u | -p | --patch | --update)
        chroot_patch
        ;;
    --wipe | --remove)
        chroot_wipe
        ;;
    --clear | --clean | --clean-system)
        chroot_clean
        ;;
    -r | --rebuild)
        chroot_wipe
        chroot_create
        chroot_patch initial
        chroot_config
        ;;
    -rc | --config | --conf)
        chroot_config
        ;;
    -s | --start)
        chroot_start
        chroot_stop
        ;;
    -v | --version)
        chroot_version
        ;;
    *)
        if [[ -z $1 ]]; then
            chroot_start
            chroot_stop
        else
            chroot_help $1 short
        fi
        ;;
esac

#EOF
